App

take number of players


- int citizenDictatorRatio
- int maxDecisions
- int maxTurns
- int maxPlayers (determined by Game via the Tile via the Board)


TODO: MAKE SURE THAT ALL PLAYERS/ROLES HAVE HASH() TO CHECK FOR EQUALITY -- THAT SHOULD BE THE STRING ID


COLLECTIONS / TABLES:

- players [{}]

- games [{
    status: // string status
    roleIds: [ // array of player ID ]
    created: // timestamp
    modified: // timestamp
}]

- turns [{
    roleId: // string player ID
    start: // timestamp
    end: // timestamp
    actions: [ {
        action: // string action name

    }]
}]

- moves [{}]

- boards [{}]

- transactions [{}]



REPOSITORY:

- player
- game




- Map<String, Action> getActions(Role, Game) - returns map of possible actions and their labels based on a role / overloaded specifically for Dictator and Citizen
- Action getDefaultAction(Role, Game) - returns default action if none taken based on role / overloaded specifically for Dictator and Citizen


So game would
Turn turn = rule.nextTurn() # this would do all the processing




- Cycle cycle

Cycle - universe-wide clock or ticker mechanism that all games adhere to
- String id
- start (time that it started)
- end (time it will end)

- List<Turn> getTurns(Game) - return ordered list of turns based on roles


NextTurn Logic
1. Send notification to player that it is their turn
2. Send list of actions they can do -- it's possible that they can commit multiple actions
   So actions can be "multi" actions that can be grouped (actions within the sameg group can be sent together)
3. Actions are validated when received
4. If invalid (or in the future, if not enough time) peform default action
5. Log action(s) to turn
6. End turn and return turn
7. Commit action


Game.State (enum)
- STARTING
- IN_PROGRESS
- ENDING
- COMPLETED

Game (abstract class)
- Comparator<Role> sort
- Turn currentTurn
- List<Role> roles
- List<Turn> turns
- List<Transaction> transactions
- Role assignRole(Player) - wraps a Player with a Role (Citizen, Dictator, etc.)
- Turn nextTurn(Game) - primary gameplay mechanism, for example, communicate with player over message queues or web sockets to

DictatorGame
- Comparator<Role> sort
- Turn nextTurn()

Turn
- Role role
- List<Action> actions
- start - time it actually started
- end - time it atually ended

Action (abstract class)
- String action
- boolean grouped = false
- boolean multiple = false
- commit(Player, Game)

OfferAction
- Offer offer

AcceptOfferAction
- action = 'ACCEPT_OFFER'
- role = Citizen

RejectOfferAction
- action = 'REJECT_OFFER'
- role = Citizen

CreateOfferAction
- action = 'CREATE_OFFER'
- boolean multiple = true
- role = Dictator

Account (interface)
- getBalance()

Transactions (abstract class)
- Account from
- Account to
- int amount
- Status status

Tranaction.Status (enum)
- PENDING, ACCEPTED, REJECTED

Offer (extends Transaction)
- int amount
- Player from
- Player to

Endowment (extends Transaction)
- Player to


ALLOCATE_ENDOWMENT
MAKE_OFFERS

Offer CREATE_OFFER = (offer) => {}
Offer ACCEPT_OFFER = (offer) => {}
Offer REJECT_OFFER = (offer) => {}




each turn is a player doing an action
all players get a turn during a cycle, to commit an action

rules list the actions available for by role (dictator, citizen, etc.)
rules sort the turns by role (somewhat like a comparable)

players and turns are given to the game
game now has players and turns

turns are played in a loop



Position
- int X
- int Y

Direction
- LEFT
- RIGHT
- UP
- DOWN

Player
- String id
- String name
- Board board
- Position position
- int wins
- int losses
- int balance
- int score
- move(Direction)


- int getWins()
- int getLosses()
- int getBalance()
- int getScore()


abstract Character extends Player
- Character(Player, Game)
- play(Action)

Dictator extends Character
- Bid makeBid(Player, Amount)

Citizen extends Character



Board
- int width
- int height
- List<Tile> tiles
- List<Player> players
- Board(int width, int height) #dimensions
- join(Player)
- leave(Player)
- isValidPosition()

Tile
- Board board
- Position position

GameTile extends Tile
- Game game


tiles likely need to implement an interface called Playable (or if you have a better name)
that should have a method called play() which happens when a player lands on a tile at the position they moveTo()
players move from tile to tile
the regular Tile does nothign on play()
other tiles may do other things to players
maximum number of players per tile -- likely needs to be set on the board
some function needs to check to make sure this limit is kept -- prevents overcrowding
different boards will have different maximum numbers
boards will be how we incorporate "levels" into the gameplay
the function to check if a player is able to move to a particular tile may need to be on the board
add other suggestions as you see fit, make sure to use lombok